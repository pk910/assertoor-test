name: Run assertoor tests on kurtosis with docker backend

on:
  workflow_call:
    inputs:
      pairs:
        type: string
        description: "The client pairs to use (format: consensus1-execution1,consensus2-execution2,...)."
        required: true
      config:
        type: string
        description: "The network config yaml to use (eg: kurtosis-test1.yaml)."
        required: true

jobs:
  run_test:
    name: "Run test '${{ inputs.config }}' with '${{ inputs.pairs }}'"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: "Generate kurtosis config with client pairs: ${{ inputs.pairs }}"
      shell: bash
      run: |
        test_file="${{ inputs.config }}"
        pairs="${{ inputs.pairs }}"

        mkdir -p ./temp
        echo "participants:" > ./temp/participants.yaml
        client_idx=0
        for pair in $(echo $pairs | tr "," "\n")
        do
          client_idx=$(expr $client_idx + 1)
          if [ "$pair" == "random" ]; then
            cl_type="random"
            el_type="random"
          else
            cl_type=$(echo "$pair" | sed 's/^\(.*\)-\(.*\)$/\1/')
            el_type=$(echo "$pair" | sed 's/^\(.*\)-\(.*\)$/\2/')
          fi
          
          if [ "$cl_type" == "random" ]; then
            cl_type=$(cat ./clients.yaml | yq -r ".consensus | keys" | shuf | tr -d ' -' | head -n 1)
          fi
          if [ "$el_type" == "random" ]; then
            el_type=$(cat ./clients.yaml | yq -r ".execution | keys" | shuf | tr -d ' -' | head -n 1)
          fi

          cl_image="$(cat ./clients.yaml | yq ".consensus.${cl_type}.image")"
          if [ "$cl_image" == "null" ]; then
            echo "Unknown CL client type: $cl_type"
            exit 1
          fi

          el_image="$(cat ./clients.yaml | yq ".execution.${el_type}.image")"
          if [ "$el_image" == "null" ]; then
            echo "Unknown EL client type: $el_type"
            exit 1
          fi

          echo "  - el_client_type: $el_type" >> ./temp/participants.yaml
          echo "    el_client_image: $el_image" >> ./temp/participants.yaml
          el_extra_params="$(cat ./clients.yaml | yq ".execution.${el_type}.params")"
          if [ "$el_extra_params" != "null" ]; then
            echo "    el_extra_params: $el_extra_params" >> ./temp/participants.yaml
          fi

          echo "    cl_client_type: $cl_type" >> ./temp/participants.yaml
          echo "    cl_client_image: $cl_image" >> ./temp/participants.yaml
          cl_extra_params="$(cat ./clients.yaml | yq ".consensus.${cl_type}.params")"
          if [ "$cl_extra_params" != "null" ]; then
            echo "    beacon_extra_params: $cl_extra_params" >> ./temp/participants.yaml
          fi

          echo "    count: 1" >> ./temp/participants.yaml

          echo "Client $client_idx"
          echo "CL: $cl_type  ($cl_image)"
          echo "EL: $el_type  ($el_image)"
        done

        export TESTS="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/assertoor-tests"

        cp ./temp/participants.yaml ./temp/test-network.yaml
        cat $test_file | envsubst >> ./temp/test-network.yaml

        echo ""
        cat ./temp/test-network.yaml

    - name: Setup Kurtosis
      shell: bash
      run: |
        echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
        sudo apt update
        sudo apt install kurtosis-cli
        kurtosis analytics disable

    - name: Run Kurtosis
      shell: bash
      run: |
        kurtosis run github.com/kurtosis-tech/ethereum-package --enclave assertoor-test --args-file ./temp/test-network.yaml

    - name: Get Service URLs
      shell: bash
      id: services
      run: |
        enclave_dump=$(kurtosis enclave inspect assertoor-test)

        assertoor_url=$(echo "$enclave_dump" | grep assertoor | grep http | sed 's/.*\(http:\/\/[0-9.:]\+\).*/\1/')
        echo "assertoor_url: ${assertoor_url}"
        echo "assertoor_url=${assertoor_url}" >> $GITHUB_OUTPUT
    
    - name: Await test completion
      shell: bash
      run: |
        assertoor_url="${{ steps.services.outputs.assertoor_url }}"

        YELLOW='\033[1;33m'
        GRAY='\033[0;37m'
        GREEN='\033[0;32m'
        RED='\033[0;31m'
        NC='\033[0m'

        # print assertor logs
        assertoor_container=$(docker container list | grep assertoor | sed 's/^\([^ ]\+\) .*$/\1/')
        docker logs -f $assertoor_container &

        # poll & check test status
        while true
        do
          pending_tests=0
          failed_tests=0
          running_test=""

          status_lines=()
          status_lines+=("$(date +'%Y-%m-%d %H:%M:%S')  Test Status:")

          tests=$(curl -s ${assertoor_url}/?json | jq -c ".tests[] | {index, name, status}")
          while read test; do
            test_id=$(echo "$test" | jq -r ".index")
            test_name=$(echo "$test" | jq -r ".name")
            test_status=$(echo "$test" | jq -r ".status")

            if [ "$test_status" == "pending" ]; then
              pending_tests=$(expr $pending_tests + 1)
              status_name="${GRAY}pending${NC}"
            elif [ "$test_status" == "running" ]; then
              pending_tests=$(expr $pending_tests + 1)
              running_test=$test_id
              status_name="${YELLOW}running${NC}"
            elif [ "$test_status" == "success" ]; then
              status_name="${GREEN}success${NC}"
            elif [ "$test_status" == "failure" ]; then
              failed_tests=$(expr $failed_tests + 1)
              status_name="${RED}failure${NC}"
            else
              status_name="$test_status"
            fi
            status_lines+=("  $status_name\t $test_name")

          done <<< $(echo "$tests")

          for status_line in "${status_lines[@]}"
          do
            echo -e "$status_line"
          done

          if [ $failed_tests -gt 0 ]; then 
              exit 1
            fi
          if [ $pending_tests -le 0 ]; then
            break
          fi

          sleep 60
        done